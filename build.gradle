
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:4.0.0'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'de.undercouch.download'

sourceCompatibility = targetCompatibility = 1.8
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

if (new File("curseKey.properties").exists()) {
    // define the properties file
    ext.configFile = file "curseKey.properties"

    configFile.withReader {
        // read config.  it shall from now on be referenced as simply config or as project.config
        def prop = new Properties()
        prop.load(it)
        project.ext.curse = new ConfigSlurper().parse prop
    }
}

repositories {
	mavenCentral()
    maven {
        name = "progwml6"
        url = "http://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "IGW"
        url = "http://maven.k-4u.nl/"
    }
    maven { // The repo from which to get waila
        name = "Mobius Repo"
        url = "http://tehnut.info/maven"
    }
    maven {
        name = "OC repo"
        url = "http://maven.cil.li/"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "CoFHCore"
        url = "http://maven.covers1624.net"
    }
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven/"
    }
}

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mod_version}"
if (hasProperty('appendBuildNumber')) {
    version = version + "-" + appendBuildNumber.toString()
} else {
    version = version + "-0"
}

group = "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id}-${config.minecraft_version}"

minecraft {
    version = "${config.forge_version}"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180612"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace '@VERSION@', project.version
    replaceIn 'Reference.java'
}

processResources{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task downloadDirectDependencies {
    doLast {
        def libs = new File("libs")
        if (!libs.isDirectory())
            libs.mkdir()

        final PREFIX = "direct."
        def properties = new Properties()
        properties.load(new FileInputStream("project.properties"))
        properties.propertyNames().each { _name ->
            def name = _name as String
            if (!name.startsWith(PREFIX))
                return

            def url = properties.getProperty(name)
            def artifactName = url.substring(url.lastIndexOf('/') + 1)
            def artifactFile = new File(libs, artifactName)
            if (artifactFile.exists())
                return

            download {
                src url
                dest libs
                overwrite false
            }
        }
    }
}

build.dependsOn sourceJar, deobfJar, downloadDirectDependencies
compileJava.dependsOn downloadDirectDependencies

dependencies {
    compile "com.google.code.findbugs:annotations:3.0.1"
    compile "com.google.code.gson:gson:2.8.5"
    compile "commons-io:commons-io:2.6"
    compile "org.lwjgl.lwjgl:lwjgl:2.9.3"

    compile "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}"
    compile "igwmod:IGW-Mod-${config.minecraft_version}:${config.igwmod_version}:userdev"
    compile "net.industrial-craft:industrialcraft-2:${config.ic2_version}:api"

    compile "mcp.mobius.waila:Hwyla:${config.hwyla_version}"
    compile "cofh:RedstoneFlux:${config.redstoneflux_version}:deobf"

    provided fileTree(dir: "libs", includes: ["*.jar"])
}

minecraft {
    useDepAts = true
}
